@page "/"
@using System.Collections.Generic
@using System.Reflection
@using System.Linq.Expressions
@using BO
@using BL

 <div class="row">
  <!-- ### Spalte 1: Kategorien-->
  @if (categorySet != null)
  {
   @*<span class="col-xs-12">
    <p>Kat: @(categorySet.Length)</p>
   </span>*@
  @*<span>NCN  @newCategoryName NTT @newTaskTitle</span>*@
   <div class="WLPanel col-xs-4 col-sm-4 col-md-3 col-lg-2">
    <!-- ---------- Überschrift Spalte 1-->
    <h4> @(categorySet.Count) <span>Categories</span></h4>
    <!-- ---------- neue Kategorie eingeben-->
    <input id="NewCategory" type="text" class="form-control" bind="@newCategoryName" placeholder="new Category..." />
    <!-- ---------- Kategorieliste ausgeben-->
    <ol class="list-group scroll">
     @foreach (var c in categorySet)
     {
      <li class="list-group-item" onclick="@(() => ShowTaskSet(c))" style="Background-color:@(this.category != null && c.CategoryID == this.category.CategoryID ? "#E0EEFA" : "white")">
       @c.Name
       <span style="float:right;" class="glyphicon glyphicon-remove-circle" onclick="@(() => RemoveCategory(c))"></span>
      </li>
     }
    </ol>
   </div>
  }

  <!-- ### Spalte 2: Aufgabenliste-->
  <div class="@(this.task!=null ? "WLPanel col-sm-6 col-md-5 col-lg-6" : "col-xs-8 col-sm-8 col-md-9 col-lg-10 WLPanel")">
   <!-- ---------- Überschrift Spalte 2-->
   <h4 id="TaskHeadline">@taskSet.Count  <span>Tasks in</span><i> @category.Name</i></h4>
   <!-- ---------- neue Aufgaben eingeben-->
   <input id="NewTask" type="text" class="form-control" bind="@newTaskTitle" placeholder="new Task..." />
   <!-- ---------- Aufgabenliste ausgeben-->
   @if (taskSet != null)
   {<ol class="list-group scroll">
     @foreach (var t in taskSet)
     {
      <li class="list-group-item" onclick="@(() => ShowTaskDetail(t))" style="@(t.TaskID == this.task?.TaskID ? "Background-color:#E0EEFA" : "Background-color:white")">
       <span style="float:right;" class="glyphicon glyphicon-remove-circle" onclick="@(() => RemoveTask(t))"></span>

       <input type="checkbox" name="@("done" + t.TaskID)" id="@("done" + t.TaskID)" checked="@t.Done" class=" MLcheckbox" onchange=@(eventArgs => { t.Done = (bool)eventArgs.Value; ChangeTask(t);  }) />

       <b>@t.Title</b>

       @if (t.Due.HasValue)
       {
        <div>Fällig am @t.Due.Value.ToShortDateString()</div>
       }

      </li>
     }
    </ol>
   }
  </div>
  <!-- ### Spalte 3: Aufgabendetails-->
  @if (task != null)
  {
   <div class="WLPanel col-xs-12 col-sm-6 col-md-4 col-lg-4">
    <TaskEdit bind-TaskID="@task.TaskID" TaskHasChanged="@ReloadTasks"></TaskEdit>
   </div>
  }
 </div> @*end row*@
@functions {
 int userID = 1; // Demo ohne Util.Login!

 List<Category> categorySet;
 List<BO.Task> taskSet;
 Category category;
 BO.Task task;

 string _newCategoryName;
 string newCategoryName
 {
  get { return _newCategoryName; }
  set
  {
    if (!String.IsNullOrEmpty(value)) CreateCategory(value);
   _newCategoryName = "";
   Util.Log("_newCategoryName");
     this.StateHasChanged();
  }
 }

 string _newTaskTitle;
 string newTaskTitle
 {
  get { return _newTaskTitle; }
  set
  {
   if (!String.IsNullOrEmpty(value)) CreateTask(value);
   _newTaskTitle = "";
      Util.Log("_newTaskTitle");
     this.StateHasChanged();
  }
 }

 private void ReloadTasks(int taskID)
 {
  Util.Log(nameof(ReloadTasks) + ": Changed Task=" + taskID);
  ShowTaskSet(this.category);
  this.task = null;
  this.StateHasChanged();
 }

 private void ShowTaskSet(Category c)
 {
  Util.Log(nameof(ShowTaskSet) + ": " + c.CategoryID);
  this.category = c;
  this.taskSet = new TaskManager(userID).GetTaskSet(c.CategoryID);
 }

 private void ShowTaskDetail(BO.Task t)
 {
  Util.Log(nameof(ShowTaskDetail) + ": " + t.TaskID);
  this.task = t;
  //this.StateHasChanged();
 }

 private async void RemoveTask(BO.Task t)
 {
  if (!await Util.Confirm("Aufgabe #" + t.TaskID, "Endgültig löschen?")) return;
  new TaskManager(userID).Remove(t.TaskID);
  ShowTaskSet(this.category);
  this.task = null;
  this.StateHasChanged();
 }

 private async void RemoveCategory(BO.Category c)
 {
  if (!await Util.Confirm("Kategorie #" + c.CategoryID, "Mit allen Aufgaben endgültig löschen?")) return;
  new CategoryManager(userID).Remove(c.CategoryID);
    this.category = null;
  ShowCategorySet();

  this.StateHasChanged();
 }

 private void CreateCategory(string newCategoryName)
 {
  if (string.IsNullOrEmpty(newCategoryName)) return;
  Util.Log("createCategory: " + newCategoryName);
  var cat = new CategoryManager(userID).CreateCategory(newCategoryName);
  ShowCategorySet();
  ShowTaskSet(cat);
 }

 void ChangeTask(BO.Task t)
 {
  Util.Log("Change Task: " + t.TaskID + " Done: " + t.Done);
  new TaskManager(userID).ChangeTask(t);
 }

 private void CreateTask(string newTaskTitle)
 {
  if (string.IsNullOrEmpty(newTaskTitle)) return;
  var t = new BO.Task();
  t.TaskID = 0; // notwendig für Server, da der die ID vergibt
  t.Title = newTaskTitle;
  t.CategoryID = this.category.CategoryID;
  t.Importance = BO.Importance.B;
  t.Created = DateTime.Now;
  t.Due = null;
  t.Order = 0;
  t.Note = "";
  t.Done = false;

  if (string.IsNullOrEmpty(newTaskTitle)) return;
  Util.Log("createTask: " + newTaskTitle);
  new TaskManager(userID).CreateTask(t);
  ShowTaskSet(this.category);
  this.newTaskTitle = "";
    this.StateHasChanged();
 }

 private async void ShowCategorySet()
 {
  categorySet = new CategoryManager(userID).GetCategorySet();
  Util.Log("LoadCategories: " + categorySet.Count);
  if (this.categorySet.Count > 0) ShowTaskSet(categorySet[0]);
  //ForecastService.GetForecastAsync(DateTime.Now);
 }

 protected override void OnInit()
 {
  ShowCategorySet();
 }

 void OnChange<TObject, TValue>(UIChangeEventArgs uIChangeEventArgs, TObject target, Expression<Func<TObject, TValue>> propertyGetter)
 {
  if (uIChangeEventArgs?.Value != null)
  {
   var expression = (MemberExpression)propertyGetter.Body;
   var property = (PropertyInfo)expression.Member;
   property.SetValue(target, uIChangeEventArgs.Value);

   // Do your own stuff here
  }
 }

}